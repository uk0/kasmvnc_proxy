# 在http块的顶部添加Lua初始化代码
init_by_lua_block {
    -- 从环境变量获取目标信息
    target_host = os.getenv("TARGET_HOST") or "10.8.0.19"
    target_port = os.getenv("TARGET_PORT") or "33335"
    username = os.getenv("USERNAME") or "admin"
    password = os.getenv("PASSWORD") or "adminaisoc"

    -- 从环境变量获取token，默认与密码相同
    access_token = os.getenv("ACCESS_TOKEN") or password

    -- 设置目标URL
    target_url = "http://" .. target_host .. ":" .. target_port

    -- 设置Basic Auth认证信息
    auth_header = "Basic " .. ngx.encode_base64(username .. ":" .. password)

    ngx.log(ngx.INFO, "Proxy initialized for target: " .. target_url)
}

# 添加token验证的Lua函数
lua_shared_dict token_sessions 10m;

server {
    listen ${PROXY_PORT};
    server_name localhost;

    # 设置代理缓冲区
    proxy_buffering on;
    proxy_buffers 16 4k;
    proxy_buffer_size 2k;

    # 增加超时时间
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;

    # 访问日志
    access_log logs/kasmvnc-access.log main;
    error_log logs/kasmvnc-error.log;

    # token验证中间件
    access_by_lua_block {
        local token_sessions = ngx.shared.token_sessions
        local args = ngx.req.get_uri_args()
        local client_ip = ngx.var.remote_addr
        local session_key = client_ip .. "_authenticated"

        -- WebSocket连接不进行token验证，因为它们通常是后续请求
        if ngx.var.http_upgrade and string.lower(ngx.var.http_upgrade) == "websocket" then
            -- 检查该IP是否已通过验证
            if token_sessions:get(session_key) then
                return
            end
        end

        -- 检查会话缓存中是否已经验证过此IP
        if token_sessions:get(session_key) then
            return
        end

        -- 检查URL参数中的token
        local token = args["token"]
        if token and token == access_token then
            -- 验证通过，将此IP加入已验证列表，有效期30分钟
            token_sessions:set(session_key, true, 1800)

            -- 如果是初始URL请求且带有token，重定向到没有token的URL
            if ngx.var.request_uri:find("token=") then
                -- 构建不带token的URL
                local uri_without_token = ngx.var.uri
                local args_without_token = {}
                for k, v in pairs(args) do
                    if k ~= "token" then
                        args_without_token[k] = v
                    end
                end

                -- 如果还有其他参数，添加到URL
                local new_args = ngx.encode_args(args_without_token)
                local redirect_url = uri_without_token
                if new_args and new_args ~= "" then
                    redirect_url = redirect_url .. "?" .. new_args
                end

                -- 执行重定向
                return ngx.redirect(redirect_url)
            end
            return
        end

        -- 没有token或token无效，返回401错误
        if not (ngx.var.uri == "/" or ngx.var.uri:match("^/static/.*$")) then
            ngx.status = 401
            ngx.header.content_type = "text/html"
            ngx.say([[
<!DOCTYPE html>
<html>
<head>
    <title>Authentication Required</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 40px;
            max-width: 600px;
            margin: 0 auto;
            text-align: center;
        }
        .error-box {
            border: 1px solid #e74c3c;
            background-color: #fdf5f4;
            color: #c0392b;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
        }
        h1 {
            color: #333;
        }
        p {
            color: #555;
            line-height: 1.5;
        }
        .form-group {
            margin: 15px 0;
        }
        input[type="text"] {
            padding: 8px;
            width: 100%;
            max-width: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #2980b9;
        }
    </style>
</head>
<body>
    <h1>Authentication Required</h1>
    <div class="error-box">
        <p>You need a valid access token to access this resource.</p>
    </div>
    <form id="tokenForm">
        <div class="form-group">
            <label for="token">Enter Access Token:</label><br>
            <input type="text" id="token" name="token" required>
        </div>
        <button type="submit">Submit</button>
    </form>
    <script>
        document.getElementById('tokenForm').onsubmit = function(e) {
            e.preventDefault();
            var token = document.getElementById('token').value.trim();
            if (token) {
                // 添加token到当前URL并重定向
                var currentUrl = window.location.href;
                var separator = currentUrl.indexOf('?') > -1 ? '&' : '?';
                window.location.href = currentUrl + separator + 'token=' + encodeURIComponent(token);
            }
        };
    </script>
</body>
</html>
            ]])
            ngx.exit(ngx.HTTP_OK)
        end
    }

# 主页（嵌入式iframe）
location = / {
    default_type text/html;
    content_by_lua_block {
        -- 检查是否已认证
        local token_sessions = ngx.shared.token_sessions
        local client_ip = ngx.var.remote_addr
        local session_key = client_ip .. "_authenticated"
        local is_authenticated = token_sessions:get(session_key)

        -- 获取URL参数中的token
        local args = ngx.req.get_uri_args()
        local token = args["token"]

        -- 如果没有认证也没有token，返回token输入页面
        if not is_authenticated and not (token and token == access_token) then
            ngx.status = 401
            ngx.header.content_type = "text/html"
            ngx.say([[
<!DOCTYPE html>
<html>
<head>
    <title>Authentication Required</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 40px;
            max-width: 600px;
            margin: 0 auto;
            text-align: center;
            background-color: #f7f9fc;
        }
        .error-box {
            border: 1px solid #e74c3c;
            background-color: #fdf5f4;
            color: #c0392b;
            padding: 20px;
            border-radius: 5px;
            margin-bottom: 20px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        h1 {
            color: #2c3e50;
            margin-bottom: 30px;
        }
        p {
            color: #555;
            line-height: 1.5;
            margin-bottom: 15px;
        }
        .form-group {
            margin: 20px 0;
        }
        input[type="text"] {
            padding: 12px;
            width: 100%;
            max-width: 300px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        input[type="text"]:focus {
            border-color: #3498db;
            outline: none;
            box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
        }
        button {
            background-color: #3498db;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
    </style>
</head>
<body>
    <h1>Authentication Required</h1>
    <div class="error-box">
        <p>You need a valid access token to access this resource.</p>
    </div>
    <form id="tokenForm">
        <div class="form-group">
            <label for="token">Enter Access Token:</label><br>
            <input type="text" id="token" name="token" placeholder="Enter your token here" required autofocus>
        </div>
        <button type="submit">Submit</button>
    </form>
    <script>
        document.getElementById('tokenForm').onsubmit = function(e) {
            e.preventDefault();
            var token = document.getElementById('token').value.trim();
            if (token) {
                // 添加token到当前URL并重定向
                var currentUrl = window.location.href;
                var separator = currentUrl.indexOf('?') > -1 ? '&' : '?';
                window.location.href = currentUrl + separator + 'token=' + encodeURIComponent(token);
            }
        };
    </script>
</body>
</html>
            ]])
            ngx.exit(ngx.HTTP_OK)
            return
        end

        -- 认证通过，显示只读模式界面 - 分成多个部分以避免过长
        local html_header = [[
<!DOCTYPE html>
<html>
<head>
    <title>KasmVNC Proxy - Read Only View</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';">
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            overflow: hidden;
            position: relative;
            font-family: Arial, sans-serif;
        }

        .iframe-container {
            width: 100%;
            height: 100%;
            position: relative;
        }

        iframe {
            width: 100%;
            height: 100%;
            border: none;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
        }

        .overlay {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: transparent;
            z-index: 2;
            user-select: none;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            touch-action: none;
            pointer-events: all;
        }

        .info-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(0, 0, 0, 0.99);
            color: white;
            padding: 20px 30px;
            border-radius: 10px;
            text-align: center;
            z-index: 3;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.99);
            max-width: 80%;
            transition: opacity 0.1s;
        }

        .info-message h3 {
            margin-top: 0;
            font-size: 24px;
            font-weight: 500;
        }

        .info-message p {
            margin-bottom: 0;
            font-size: 16px;
            line-height: 1.5;
        }

        .fade-out {
            opacity: 0.9;
            transition: opacity 3s;
        }
    </style>
</head>
<body>
    <div class="iframe-container">
        <iframe src="/proxy/" allowfullscreen="true" sandbox="allow-same-origin allow-scripts"></iframe>
        <div class="overlay" id="overlay"></div>
        <div class="info-message" id="info-message">
            <h3>Read-only Mode</h3>
            <p>The current interface is in read-only mode and interactive operations are not possible.</p>
        </div>
    </div>
]]

        local script_part1 = [[
    <script>
        (function() {
            const overlay = document.getElementById('overlay');
            const infoMessage = document.getElementById('info-message');
            const iframe = document.querySelector('iframe');

            // 设置信息提示在几秒后淡出
            setTimeout(() => {
                infoMessage.classList.add('fade-out');
            }, 3000);

            // ===== 鼠标事件拦截 =====
            const mouseEvents = [
                'click', 'dblclick', 'mousedown', 'mouseup', 'mousemove',
                'mouseover', 'mouseout', 'mouseenter', 'mouseleave',
                'contextmenu', 'wheel'
            ];
            mouseEvents.forEach(eventType => {
                overlay.addEventListener(eventType, event => {
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }, { capture: true, passive: false });
            });

            // ===== 触摸事件拦截 =====
            const touchEvents = [
                'touchstart', 'touchmove', 'touchend', 'touchcancel'
            ];
            touchEvents.forEach(eventType => {
                overlay.addEventListener(eventType, event => {
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }, { capture: true, passive: false });
            });
]]

        local script_part2 = [[
            // ===== 键盘事件拦截 =====
            // 特别拦截Mac上的Command+R刷新组合键
            let commandKeyPressed = false;

            // 监听keydown事件
            window.addEventListener('keydown', event => {
                event.preventDefault();
                event.stopPropagation();

                // 检测Command键（metaKey在Mac上是Command键）
                if (event.metaKey) {
                    commandKeyPressed = true;
                    console.log('Command键被按下');
                }

                // 特别拦截常见快捷键
                const key = event.key.toLowerCase();
                const ctrl = event.ctrlKey || event.metaKey;

                // 记录尝试的特殊键操作
                if (event.key === 'F5' || (ctrl && key === 'r')) {
                    console.log('刷新操作被阻止: ' + (event.metaKey ? 'Command+R' : 'Ctrl+R'));
                } else if (ctrl && key === 'n') {
                    console.log('新窗口操作被阻止');
                } else if (event.altKey && (key === 'arrowleft' || key === 'arrowright')) {
                    console.log('浏览历史导航被阻止');
                } else if (event.key.startsWith('F') && !isNaN(event.key.substring(1))) {
                    console.log('功能键操作被阻止: ' + event.key);
                }

                return false;
            }, { capture: true, passive: false });

            // 监听keyup事件，重置命令键状态
            window.addEventListener('keyup', event => {
                event.preventDefault();
                event.stopPropagation();

                if (event.key === 'Meta') {
                    commandKeyPressed = false;
                    console.log('Command键被释放');
                }

                return false;
            }, { capture: true, passive: false });

            // 监测keypress事件
            window.addEventListener('keypress', event => {
                event.preventDefault();
                event.stopPropagation();
                return false;
            }, { capture: true, passive: false });

            // 额外监控Command+R组合
            document.addEventListener('visibilitychange', function(e) {
                e.preventDefault();
                e.stopPropagation();
                return false;
            }, { capture: true, passive: false });
]]

        local script_part3 = [[
            // ===== 上下文菜单和选择拦截 =====
            document.addEventListener('contextmenu', event => {
                event.preventDefault();
                return false;
            }, { capture: true, passive: false });

            document.addEventListener('selectstart', event => {
                event.preventDefault();
                return false;
            }, { capture: true, passive: false });

            // ===== 剪贴板操作拦截 =====
            document.addEventListener('copy', event => {
                event.preventDefault();
                return false;
            }, { capture: true, passive: false });

            document.addEventListener('cut', event => {
                event.preventDefault();
                return false;
            }, { capture: true, passive: false });

            document.addEventListener('paste', event => {
                event.preventDefault();
                return false;
            }, { capture: true, passive: false });

            // ===== 拖拽操作拦截 =====
            document.addEventListener('dragstart', event => {
                event.preventDefault();
                return false;
            }, { capture: true, passive: false });

            document.addEventListener('drop', event => {
                event.preventDefault();
                return false;
            }, { capture: true, passive: false });
]]

        local script_part4 = [[
            // ===== 页面刷新/离开拦截 =====
            // 拦截beforeunload事件
            window.addEventListener('beforeunload', event => {
                event.preventDefault();
                event.returnValue = '';
                console.log('离开页面操作被阻止');
                return false;
            }, { capture: true, passive: false });

            // 拦截visibilitychange事件（可能与Command+Tab或Command+R相关）
            document.addEventListener('visibilitychange', event => {
                event.preventDefault();
                console.log('页面可见性变化被监控');
                return false;
            }, { capture: true, passive: false });

            // 尝试覆盖浏览器的刷新功能
            window.onbeforeunload = function(e) {
                e.preventDefault();
                e.returnValue = '';
                console.log('页面卸载操作被阻止');
                return false;
            };

            // ===== iframe保护 =====
            // 禁用iframe内指针事件
            iframe.style.pointerEvents = 'none';

            // 尝试控制iframe内容
            try {
                iframe.onload = function() {
                    try {
                        const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;

                        // 如果能访问iframe内容，添加事件拦截
                        if (iframeDoc) {
                            iframeDoc.addEventListener('keydown', event => {
                                event.preventDefault();
                                event.stopPropagation();
                                return false;
                            }, { capture: true, passive: false });

                            iframeDoc.addEventListener('mousedown', event => {
                                event.preventDefault();
                                event.stopPropagation();
                                return false;
                            }, { capture: true, passive: false });
                        }
                    } catch (e) {
                        // 可能因为跨域限制无法访问iframe内容
                        console.log('无法访问iframe内容: ' + e.message);
                    }
                };
            } catch (e) {
                console.log('设置iframe安全策略失败: ' + e.message);
            }
]]

        local script_part5 = [[
            // ===== 防止删除覆盖层 =====
            // 定期检查覆盖层是否存在，如果被删除则重新添加
            setInterval(() => {
                if (!document.getElementById('overlay')) {
                    const newOverlay = document.createElement('div');
                    newOverlay.id = 'overlay';
                    newOverlay.className = 'overlay';
                    document.querySelector('.iframe-container').appendChild(newOverlay);

                    // 重新添加事件监听器
                    mouseEvents.concat(touchEvents).forEach(eventType => {
                        newOverlay.addEventListener(eventType, event => {
                            event.preventDefault();
                            event.stopPropagation();
                            return false;
                        }, { capture: true, passive: false });
                    });
                }

                // 确保iframe依然是不可交互的
                document.querySelector('iframe').style.pointerEvents = 'none';
            }, 1000);

            // 额外的浏览器刷新防护
            // 重写history方法以阻止某些导航
            const originalPushState = history.pushState;
            const originalReplaceState = history.replaceState;

            history.pushState = function() {
                console.log('History pushState被拦截');
                return originalPushState.apply(this, arguments);
            };

            history.replaceState = function() {
                console.log('History replaceState被拦截');
                return originalReplaceState.apply(this, arguments);
            };

            // 特别处理Command+R组合键
            let rKeyHandler = function(e) {
                if ((e.metaKey || e.ctrlKey) && (e.key === 'r' || e.key === 'R' || e.keyCode === 82)) {
                    console.log('Command+R/Ctrl+R组合键被显式阻止');
                    e.preventDefault();
                    e.stopPropagation();
                    return false;
                }
            };

            // 在多个级别添加事件监听器
            document.addEventListener('keydown', rKeyHandler, { capture: true, passive: false });
            window.addEventListener('keydown', rKeyHandler, { capture: true, passive: false });
            if (iframe) {
                try {
                    iframe.contentWindow.addEventListener('keydown', rKeyHandler, { capture: true, passive: false });
                } catch (e) {
                    console.log('无法在iframe中添加键盘事件监听器');
                }
            }

        })();
    </script>
</body>
</html>
]]

        -- 将所有部分组合起来
        ngx.say(html_header)
        ngx.say(script_part1)
        ngx.say(script_part2)
        ngx.say(script_part3)
        ngx.say(script_part4)
        ngx.say(script_part5)
    }
}



    # 代理普通HTTP请求
    location /proxy/ {
        # 使用Lua添加Basic Auth头
        rewrite_by_lua_block {
            ngx.req.set_header("Authorization", auth_header)
        }

        # 代理到目标服务器，去掉/proxy/前缀
        proxy_pass ${TARGET_URL}/;

        # 保持原始Host和其他头信息
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 替换HTML内容中的URL
        sub_filter_once off;
        sub_filter_types text/html application/javascript;
        sub_filter 'ws://${TARGET_HOST}:${TARGET_PORT}/' 'ws://$host/ws/';
        sub_filter 'http://${TARGET_HOST}:${TARGET_PORT}/' 'http://$host/proxy/';
    }

    # WebSocket代理 - 通用路径
    location /ws/ {
        # 使用Lua添加Basic Auth头
        rewrite_by_lua_block {
            ngx.req.set_header("Authorization", auth_header)
        }

        # WebSocket设置
        proxy_pass ${TARGET_URL}/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # 特定WebSocket路径 - WebSockify
    location /websockify {
        # 使用Lua添加Basic Auth头
        rewrite_by_lua_block {
            ngx.req.set_header("Authorization", auth_header)
        }

        # WebSocket设置
        proxy_pass ${TARGET_URL}/websockify;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # 特定WebSocket路径 - API WS
    location /api/ws {
        # 使用Lua添加Basic Auth头
        rewrite_by_lua_block {
            ngx.req.set_header("Authorization", auth_header)
        }

        # WebSocket设置
        proxy_pass ${TARGET_URL}/api/ws;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # Socket.IO 处理
    location /socket.io/ {
        # 使用Lua添加Basic Auth头
        rewrite_by_lua_block {
            ngx.req.set_header("Authorization", auth_header)
        }

        # 代理设置
        proxy_pass ${TARGET_URL}/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # Audio Socket.IO 处理
    location /audio/socket.io/ {
        # 使用Lua添加Basic Auth头
        rewrite_by_lua_block {
            ngx.req.set_header("Authorization", auth_header)
        }

        # 代理设置
        proxy_pass ${TARGET_URL}/audio/socket.io/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
    }

    # 使用内置状态监控
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}