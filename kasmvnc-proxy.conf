################################################################
# kasmvnc-proxy.conf
# 1) connect_id -> PostgreSQL 查询 -> shared_dict 存 target|auth
# 2) /test_vncs、/show_config、/query_vmodel 保留
# 3) 根路径表单 + /vnc_player <iframe src="/proxy/?connect_id=...">
# 4) /proxy/vnc/public/... & /proxy/public/... 静态资源直接剥前缀代理
# 5) /proxy/... HTML 及其它接口，注入 <base href="/proxy/"> 避免递归
# 6) WebSocket 路径动态认证 + 直通
################################################################

# 全局初始化
init_by_lua_file conf/lua/init.lua;
lua_shared_dict auth_sessions 10m;

server {
    listen       ${PROXY_PORT};
    server_name  localhost;

    # —— 代理缓冲 & 超时 ——
    proxy_buffering       on;
    proxy_buffers         16 4k;
    proxy_buffer_size     2k;
    proxy_connect_timeout 300s;
    proxy_send_timeout    300s;
    proxy_read_timeout    300s;

    access_log logs/kasmvnc-access.log main;
    error_log  logs/kasmvnc-error.log info;

    # 本次请求临时变量
    set $target '';
    set $auth   '';

    ############################################################################
    # 全局：带 connect_id 时从 PG 查询后端并写入 shared_dict
    ############################################################################
    access_by_lua_block {
        local vid = ngx.var.arg_connect_id or ''
        if vid ~= '' then
            local db_utils = require('conf.lua.db_utils')
            local host,port,user,pass = db_utils.query_connection_info(vid)
            if host and port then
                local t = 'http://'..host..':'..port
                local a = 'Basic '..ngx.encode_base64(user..':'..pass)
                local key = ngx.var.remote_addr..'_proxy_info'
                ngx.shared.auth_sessions:set(key, t..'|'..a, 1800)
                ngx.var.target = t
                ngx.var.auth   = a
                ngx.log(ngx.INFO, "Proxy init: connect_id=", vid, " -> ", t)
            end
        end
    }

    ############################################################################
    # /test_vncs — 显示 agents 表前 100 条
    ############################################################################
    location /test_vncs {
        content_by_lua_block {
            local db_utils = require("conf.lua.db_utils")
            ngx.header["Content-Type"] = "text/html; charset=utf-8"
            ngx.say("<h1>VNC Instances（前 100 条）</h1>")
            local rows,err = db_utils.get_all_kasm_vncs()
            if err then ngx.say("<p style='color:red'>"..err.."</p>"); return end
            ngx.say("<table border='1'><tr>")
            for col,_ in pairs(rows[1] or {}) do ngx.say("<th>"..col.."</th>") end
            ngx.say("</tr>")
            for _,row in ipairs(rows) do
                ngx.say("<tr>")
                for _,v in pairs(row) do ngx.say("<td>"..tostring(v).."</td>") end
                ngx.say("</tr>")
            end
            ngx.say("</table>")
        }
    }

    ############################################################################
    # /show_config — 查看当前 proxy 变量与 Shared Dict
    ############################################################################
    location /show_config {
        content_by_lua_block {
            ngx.header["Content-Type"] = "text/plain; charset=utf-8"
            ngx.say("target=", ngx.var.target)
            ngx.say("auth=  ", ngx.var.auth)
            ngx.say("Request URI=", ngx.var.request_uri)
            local key = ngx.var.remote_addr.."_proxy_info"
            ngx.say("Shared=", ngx.shared.auth_sessions:get(key) or "nil")
        }
    }

    ############################################################################
    # /query_vmodel — 单独查询 vmodel 信息
    ############################################################################
    location /query_vmodel {
        content_by_lua_block {
            ngx.header["Content-Type"] = "text/html; charset=utf-8"
            local vid = ngx.var.arg_connect_id or ''
            ngx.say("<h3>查询 connect_id="..vid.."</h3>")
            if vid=='' then ngx.say("<p>请提供 ?connect_id=xxx</p>"); return end
            local db_utils = require("conf.lua.db_utils")
            local h,p,u,pass = db_utils.query_connection_info(vid)
            ngx.say("<p>host="..h.."</p>")
            ngx.say("<p>port="..p.."</p>")
            ngx.say("<p>user="..u.."</p>")
            ngx.say("<p>pass="..pass.."</p>")
        }
    }

    ############################################################################
    # 根路径 “/”：带参数跳转 /vnc_player，否则渲染输入表单
    ############################################################################
    location = / {
        if ($arg_connect_id) {
            return 302 /vnc_player?connect_id=$arg_connect_id;
        }
        default_type text/html;
        content_by_lua_block {
            ngx.header["Content-Type"]="text/html; charset=utf-8"
            ngx.say([[
<!DOCTYPE html><html><head><meta charset="utf-8"><title>VNC Proxy</title></head>
<body style="font-family:Arial,sans-serif;padding:40px;text-align:center;">
  <h1>请输入 VModel ID</h1>
  <form method="get" action="/">
    <input name="connect_id" placeholder="Model-YYYYMMDD-XXXXXX" required
           style="padding:8px;width:250px;" />
    <button type="submit" style="padding:8px 16px;">连接</button>
  </form>
</body></html>
            ]])
        }
    }

    ############################################################################
    # /vnc_player — 嵌入 <iframe src="/proxy/?connect_id=...">
    ############################################################################
    location /vnc_player {
        default_type text/html;
        content_by_lua_block {
            local vid = ngx.var.arg_connect_id or ''
            if vid=='' then return ngx.redirect("/") end
            ngx.header["Content-Type"]="text/html; charset=utf-8"
            ngx.say([[
<!DOCTYPE html><html><head><meta charset="utf-8"><title>VNC - ]]..vid..[[</title></head>
<body style="margin:0;overflow:hidden;">
  <iframe src="/proxy/?connect_id=]]..vid..[["
          style="border:none;width:100%;height:100vh;"></iframe>
</body></html>
            ]])
        }
    }

    ############################################################################
    # 1) 静态资源：/proxy/vnc/public/...、/proxy/public/... 直接剥 /proxy 前缀
    ############################################################################
    location ~ ^/proxy/(vnc/public|public)/(.*)$ {
        rewrite_by_lua_block {
            ngx.req.set_header("X-Recursive-Check","1")
            local key,info = ngx.var.remote_addr.."_proxy_info",
                             ngx.shared.auth_sessions:get(ngx.var.remote_addr.."_proxy_info")
            if not info then return ngx.redirect("/") end
            local parts={},t,a
            for p in info:gmatch("[^|]+") do table.insert(parts,p) end
            t,a=parts[1],parts[2]
            -- 自我代理检测
            local port,addr=ngx.var.server_port,ngx.var.server_addr; local u=t:lower()
            if u==("http://127.0.0.1:"..port)
            or u==("http://localhost:"..port)
            or u==("http://"..addr..":"..port) then
                ngx.shared.auth_sessions:delete(key); return ngx.exit(502)
            end
            ngx.var.target = t
            ngx.req.set_header("Authorization", a)
        }
        # 剥掉 /proxy 前缀
        rewrite ^/proxy(/.*)$ $1 break;
        proxy_pass      $target$1$is_args$args;
        proxy_http_version 1.1;
        proxy_set_header Host            $host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    ############################################################################
    # 2) HTML 页面及其它所有接口：/proxy/... 剥前缀并加 <base>
    ############################################################################
    location /proxy/ {
        rewrite_by_lua_block {
            ngx.req.set_header("X-Recursive-Check","1")
            local key,info = ngx.var.remote_addr.."_proxy_info",
                             ngx.shared.auth_sessions:get(ngx.var.remote_addr.."_proxy_info")
            if not info then return ngx.redirect("/") end
            local parts={},t,a
            for p in info:gmatch("[^|]+") do table.insert(parts,p) end
            t,a=parts[1],parts[2]
            local port,addr=ngx.var.server_port,ngx.var.server_addr; local u=t:lower()
            if u==("http://127.0.0.1:"..port)
            or u==("http://localhost:"..port)
            or u==("http://"..addr..":"..port) then
                ngx.shared.auth_sessions:delete(key); return ngx.exit(502)
            end
            ngx.var.target = t
            ngx.req.set_header("Authorization", a)
        }
        rewrite ^/proxy(/.*)$ $1 break;
        proxy_pass      $target$1$is_args$args;
        proxy_http_version 1.1;
        proxy_set_header Host            $host;
        proxy_set_header X-Real-IP       $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 注入 base，保证所有相对路径都以 /proxy/ 开头
        sub_filter_types text/html;
        sub_filter '<head>' '<head><base href="/proxy/">';
        sub_filter '<head ' '<head <base href="/proxy/">';
        sub_filter_once on;
    }

    ############################################################################
    # WebSocket 代理（/ws/, /websockify, /api/ws, /socket.io/, /audio/socket.io/）
    ############################################################################
    # 通用示例：/ws/
    location /ws/ {
        rewrite_by_lua_block {
            ngx.req.set_header("X-Recursive-Check","1")
            local key,info = ngx.var.remote_addr.."_proxy_info",
                             ngx.shared.auth_sessions:get(ngx.var.remote_addr.."_proxy_info")
            if not info then return ngx.redirect("/") end
            local parts={},t,a
            for p in info:gmatch("[^|]+") do table.insert(parts,p) end
            t,a=parts[1],parts[2]
            local port,addr=ngx.var.server_port,ngx.var.server_addr; local u=t:lower()
            if u==("http://127.0.0.1:"..port)
            or u==("http://localhost:"..port)
            or u==("http://"..addr..":"..port) then
                ngx.shared.auth_sessions:delete(key); return ngx.exit(502)
            end
            ngx.var.target = t
            ngx.req.set_header("Authorization", a)
        }
        # 将 /ws/... 直接转发到 target/ws/...
        proxy_pass $target$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Upgrade   $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host      $host;
    }

    # /websockify
    location /websockify {
        rewrite_by_lua_block {
            ngx.req.set_header("X-Recursive-Check","1")
            local key,info = ngx.var.remote_addr.."_proxy_info",
                             ngx.shared.auth_sessions:get(ngx.var.remote_addr.."_proxy_info")
            if not info then return ngx.redirect("/") end
            local parts={},t,a
            for p in info:gmatch("[^|]+") do table.insert(parts,p) end
            t,a=parts[1],parts[2]
            local port,addr=ngx.var.server_port,ngx.var.server_addr; local u=t:lower()
            if u==("http://127.0.0.1:"..port)
            or u==("http://localhost:"..port)
            or u==("http://"..addr..":"..port) then
                ngx.shared.auth_sessions:delete(key); return ngx.exit(502)
            end
            ngx.var.target = t
            ngx.req.set_header("Authorization", a)
        }
        proxy_pass $target/websockify$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Upgrade   $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host      $host;
    }

    # /api/ws
    location /api/ws {
        rewrite_by_lua_block {
            ngx.req.set_header("X-Recursive-Check","1")
            local key,info = ngx.var.remote_addr.."_proxy_info",
                             ngx.shared.auth_sessions:get(ngx.var.remote_addr.."_proxy_info")
            if not info then return ngx.redirect("/") end
            local parts={},t,a
            for p in info:gmatch("[^|]+") do table.insert(parts,p) end
            t,a=parts[1],parts[2]
            local port,addr=ngx.var.server_port,ngx.var.server_addr; local u=t:lower()
            if u==("http://127.0.0.1:"..port)
            or u==("http://localhost:"..port)
            or u==("http://"..addr..":"..port) then
                ngx.shared.auth_sessions:delete(key); return ngx.exit(502)
            end
            ngx.var.target = t
            ngx.req.set_header("Authorization", a)
        }
        proxy_pass $target/api/ws$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Upgrade   $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host      $host;
    }

    # /socket.io/
    location /socket.io/ {
        rewrite_by_lua_block {
            ngx.req.set_header("X-Recursive-Check","1")
            local key,info = ngx.var.remote_addr.."_proxy_info",
                             ngx.shared.auth_sessions:get(ngx.var.remote_addr.."_proxy_info")
            if not info then return ngx.redirect("/") end
            local parts={},t,a
            for p in info:gmatch("[^|]+") do table.insert(parts,p) end
            t,a=parts[1],parts[2]
            local port,addr=ngx.var.server_port,ngx.var.server_addr; local u=t:lower()
            if u==("http://127.0.0.1:"..port)
            or u==("http://localhost:"..port)
            or u==("http://"..addr..":"..port) then
                ngx.shared.auth_sessions:delete(key); return ngx.exit(502)
            end
            ngx.var.target = t
            ngx.req.set_header("Authorization", a)
        }
        proxy_pass $target/socket.io$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Upgrade   $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host      $host;
    }

    # /audio/socket.io/
    location /audio/socket.io/ {
        rewrite_by_lua_block {
            ngx.req.set_header("X-Recursive-Check","1")
            local key,info = ngx.var.remote_addr.."_proxy_info",
                             ngx.shared.auth_sessions:get(ngx.var.remote_addr.."_proxy_info")
            if not info then return ngx.redirect("/") end
            local parts={},t,a
            for p in info:gmatch("[^|]+") do table.insert(parts,p) end
            t,a=parts[1],parts[2]
            local port,addr=ngx.var.server_port,ngx.var.server_addr; local u=t:lower()
            if u==("http://127.0.0.1:"..port)
            or u==("http://localhost:"..port)
            or u==("http://"..addr..":"..port) then
                ngx.shared.auth_sessions:delete(key); return ngx.exit(502)
            end
            ngx.var.target = t
            ngx.req.set_header("Authorization", a)
        }
        proxy_pass $target/audio/socket.io$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Upgrade   $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host      $host;
    }

    ############################################################################
    # 内置状态监控
    ############################################################################
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}